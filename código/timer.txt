using UnityEngine;
using TMPro;
using System.IO;
using MathNet.Numerics;
using static TMPro.SpriteAssetUtilities.TexturePacker_JsonArray;

public class example_timer : MonoBehaviour
{
    

    public TMP_Text tex;
    public float countdown;
    public int Control;
    public int enemiesTotal;
    public EnemyManager enemyManager; // Referência à instância de EnemyManager
 
  
    void Start()
    {
        Control = 0;
        enemyManager = FindObjectOfType<EnemyManager>();
        if (enemyManager != null)
        {
            enemiesTotal = enemyManager.NumEnemiesTotal;
        }
        enemiesTotal = enemyManager.NumEnemiesTotal;
        countdown = 5;
    }
    
    void UpdateEnemiesTotal()
    {
        enemiesTotal = enemyManager.NumEnemiesTotal;
    }

    void Update()
    {
        

 if (Control < 3)
        {
            UpdateEnemiesTotal();
            Control++;
        }
        if (Control == 3)
        {
            for (int i = 0; i < enemiesTotal; i++)
            {
                countdown += (int)gaussianaInv(9, 2, 13);
            }
            Control++;

        }
        if (countdown > 0)
        {
            countdown -= Time.deltaTime;
        }
        else
        {
            countdown = 0;
        }

        double roundedCountdown = System.Math.Round(countdown, 2);
        tex.text = roundedCountdown.ToString();

        if (countdown <= 10)
        {
            tex.color = Color.red;
        }
        else
        {
            tex.color = Color.white;
        }
        if (countdown <= 0&& Control > 3)
        {
            Cursor.lockState = CursorLockMode.None;
            ScenesManager.Instance.LoadYouDied();
            Cursor.lockState = CursorLockMode.None;
        }
           
    
        }
       
    double gaussianaInv(double med, double desv, double M)
    {
        //F(x)=(1/2)[1+erf((x-u)/(o√2))]
        //F^(-1)(x)=u+o√2*erf^(-1)((erf((M-u)/(o√2))+erf((M-u)/(o√2)))U-erf((M-u)/(o√2))


        double aux = SpecialFunctions.Erf(med / desv * Mathf.Sqrt(2));
        double p = UnityEngine.Random.Range((0f), (1f));
        return med + desv * Mathf.Sqrt(2) * SpecialFunctions.ErfInv((SpecialFunctions.Erf((M - med) / desv * Mathf.Sqrt(2)) + aux) * p - aux);
    }
   
}
