using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.SceneManagement;
using System.IO;
using MathNet.Numerics;
using static TMPro.SpriteAssetUtilities.TexturePacker_JsonArray;

public class zombieMoviment : MonoBehaviour
{
    public NavMeshAgent navMeshAgent;
    public Transform playerTransform;
    private readonly string[] m_animations = { "Attack", "Dead", "Reset","Damage" };
    private Animator[] m_animators;
    private int life = 3;
    private bool isDead = false;
    private float deadCooldown = 6f;
    public delegate void EnemyKilled();
    public static event EnemyKilled OnEnemyKilled;
    public delegate void EnemyKilledCount();
    public static event EnemyKilledCount OnEnemyKilledCount;
    public delegate void PlayerDamage();
    
    

    [SerializeField] private AudioSource atackSoundEffect;



    // Start is called before the first frame update
   
    void Start()
    {
        m_animators = FindObjectsOfType<Animator>();     
        playerTransform = GameObject.Find("Player").transform;


    }
    public void die()
    {
        if (navMeshAgent != null)
        {
            navMeshAgent.enabled = false;
        }

        foreach (Collider collider in GetComponents<Collider>())
        {
            collider.enabled = false;
        }

        Destroy(gameObject);

        if (OnEnemyKilled != null)
        {
            OnEnemyKilled();
        }
    }

    // Update is called once per frame
    void Update()
    {
       

 if (isDead)
        {
            die();
        }
        if ( navMeshAgent != null)
        {    
            navMeshAgent.SetDestination(playerTransform.position);
        }



    }
        
       

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.collider.name == "Player")
        {
            ActivateAttackAnimation();
        }

    }

    void ActivateAttackAnimation()
    {
        foreach (Animator animator in m_animators)
        {
            if (animator != null && animator.runtimeAnimatorController != null && animator.gameObject.GetComponent<zombieMoviment>() == this)
            {
                atackSoundEffect.Play();
                animator.SetTrigger("Attack");

            }
        }
    }


    void ActivateDeadanimation()
    {

        if (OnEnemyKilledCount != null)
        {
            OnEnemyKilledCount();
        }
        foreach (Collider collider in GetComponents<Collider>())
        {
            collider.enabled = false;
        }

       
        List<Animator> validAnimators = new List<Animator>();

        foreach (Animator animator in m_animators)
        {
            
            if (animator != null && animator.runtimeAnimatorController != null && animator.gameObject.GetComponent<zombieMoviment>() == this)
            {
                validAnimators.Add(animator);
                animator.SetTrigger("Dead");
            }
        }

       
        StartCoroutine(DeadCooldown(validAnimators));
    }

    IEnumerator DeadCooldown(List<Animator> validAnimators)
    {
         
        navMeshAgent.isStopped = true;

       
        yield return new WaitForSeconds(deadCooldown);

      
        foreach (Animator animator in validAnimators)
        {
            if (animator != null)
            {
                animator.SetTrigger("Reset");
            }
        }

        navMeshAgent.isStopped = false;
        isDead = true;
    }


    public void TakeDamage()
    {
        if (life <= 1)
        {         
            ActivateDeadanimation();
        }
            life--;       
    }
   
}
    